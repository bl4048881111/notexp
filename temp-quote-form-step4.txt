              {/* STEP 4: Riepilogo */}
              {currentStep === 4 && (
                <div className="space-y-4">
                  {/* Nome cliente in alto */}
                  <div className="bg-primary/5 p-3 rounded-md border-l-4 border-primary">
                    <div className="text-sm text-muted-foreground">Cliente</div>
                    <div className="font-semibold text-base">
                      {selectedClient 
                        ? `${selectedClient.name} ${selectedClient.surname}`
                        : form.getValues("clientName") || "Cliente"
                      }
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {/* Manodopera Extra */}
                    <div className="space-y-1">
                      <FormField
                        control={form.control}
                        name="laborPrice"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-xs">Tariffa oraria</FormLabel>
                            <FormControl>
                              <div className="flex items-center space-x-2">
                                <Input 
                                  {...field} 
                                  type="number" 
                                  min={0} 
                                  onChange={(e) => {
                                    const value = parseFloat(e.target.value);
                                    field.onChange(value);
                                    // Ricalcola i totali quando cambia la tariffa
                                    const hours = form.getValues("laborHours") || 0;
                                    const laborTotal = value * hours;
                                    const newTotal = form.getValues("subtotal") + laborTotal;
                                    form.setValue("total", newTotal);
                                  }}
                                />
                                <span className="text-xs">â‚¬/h</span>
                              </div>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-1">
                      <FormField
                        control={form.control}
                        name="laborHours"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-xs">Ore totali</FormLabel>
                            <FormControl>
                              <div className="flex items-center space-x-2">
                                <Input 
                                  {...field} 
                                  type="number" 
                                  min={0} 
                                  step={0.5} 
                                  onChange={(e) => {
                                    const value = parseFloat(e.target.value);
                                    field.onChange(value);
                                    // Ricalcola i totali quando cambiano le ore
                                    const price = form.getValues("laborPrice") || 0;
                                    const laborTotal = price * value;
                                    const newTotal = form.getValues("subtotal") + laborTotal;
                                    form.setValue("total", newTotal);
                                  }}
                                />
                                <span className="text-xs">ore</span>
                              </div>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <div className="space-y-1">
                      <FormField
                        control={form.control}
                        name="status"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-xs">Stato Preventivo</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Seleziona uno stato" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="bozza">Bozza</SelectItem>
                                <SelectItem value="inviato">Inviato</SelectItem>
                                <SelectItem value="accettato">Accettato</SelectItem>
                                <SelectItem value="rifiutato">Rifiutato</SelectItem>
                                <SelectItem value="scaduto">Scaduto</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="validUntil"
                      render={({ field }) => (
                        <FormItem className="flex flex-col">
                          <FormLabel className="text-xs">Valido fino al</FormLabel>
                          <Popover>
                            <PopoverTrigger asChild>
                              <FormControl>
                                <Button
                                  variant={"outline"}
                                  className={cn(
                                    "w-full pl-3 text-left font-normal",
                                    !field.value && "text-muted-foreground"
                                  )}
                                >
                                  {field.value ? (
                                    format(new Date(field.value), "PPP", {
                                      locale: it,
                                    })
                                  ) : (
                                    <span>Seleziona una data</span>
                                  )}
                                  <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                </Button>
                              </FormControl>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0" align="start">
                              <Calendar
                                mode="single"
                                selected={new Date(field.value)}
                                onSelect={(date) => {
                                  if (date) {
                                    field.onChange(format(date, "yyyy-MM-dd"));
                                  }
                                }}
                                initialFocus
                              />
                            </PopoverContent>
                          </Popover>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  
                    <FormField
                      control={form.control}
                      name="taxRate"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-xs">Aliquota IVA (%)</FormLabel>
                          <FormControl>
                            <Input 
                              {...field} 
                              type="number" 
                              min={0} 
                              max={100} 
                              onChange={(e) => {
                                const value = e.target.value === "" ? "" : parseInt(e.target.value, 10);
                                field.onChange(value);
                                // Ricalcola i totali quando cambia l'IVA
                                setTimeout(() => calculateTotals(items), 0);
                              }}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <FormField
                    control={form.control}
                    name="notes"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-xs">Note</FormLabel>
                        <FormControl>
                          <Textarea 
                            {...field} 
                            placeholder="Note aggiuntive per il preventivo"
                            className="h-16"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <div className="border rounded-md overflow-hidden bg-primary/5">
                    <div className="bg-black text-white p-3">
                      <h3 className="font-semibold text-base">Totale Preventivo</h3>
                    </div>
                    <div className="p-3 space-y-2 text-sm">
                      <div className="flex justify-between items-center">
                        <span>Subtotale Servizi:</span>
                        <span className="font-medium">{formatCurrency(form.getValues("subtotal") || 0)}</span>
                      </div>
                      
                      <div className="flex justify-between items-center">
                        <span>Manodopera extra:</span>
                        <span className="font-medium">
                          {formatCurrency((form.getValues("laborPrice") || 0) * (form.getValues("laborHours") || 0))}
                        </span>
                      </div>
                      
                      <div className="flex justify-between items-center">
                        <span>IVA ({form.getValues("taxRate")}%):</span>
                        <span className="font-medium">{formatCurrency(form.getValues("taxAmount") || 0)}</span>
                      </div>
                      
                      <div className="h-px w-full bg-border my-2"></div>
                      
                      <div className="flex justify-between items-center bg-primary/10 p-2 rounded-sm">
                        <span className="font-bold">TOTALE:</span>
                        <span className="font-bold text-primary">
                          {formatCurrency(
                            (form.getValues("total") || 0) + 
                            (form.getValues("laborPrice") || 0) * (form.getValues("laborHours") || 0)
                          )}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex justify-between space-x-2 pt-4">
                    <Button 
                      type="button" 
                      variant="outline" 
                      onClick={goToPreviousStep}
                    >
                      Indietro
                    </Button>
                    
                    <div className="flex space-x-2">
                      <Button type="button" variant="outline" onClick={onClose}>
                        Annulla
                      </Button>
                      <Button type="submit" disabled={isLoading}>
                        {quote ? "Aggiorna" : "Salva"} Preventivo
                      </Button>
                    </div>
                  </div>
                </div>
              )}